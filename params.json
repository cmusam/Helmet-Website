{
  "name": "Helmet",
  "tagline": "",
  "body": "### Summary\r\nI plan to implement a Swift 2.0 Library that allows efficient GPU parallel computations on Mac OS X using Metal. Compared to iOS devices, Macs have more powerful GPUs with larger on-device memories, creating greater potential for parallel computation.\r\n\r\n### Background\r\nIn December 2015, Swift was open sourced and is possibly on its way to become a mainstream programming language. At WWDC 2015, Apple announced support for Metal on OS X, unleashing more efficient computing possibilities for Mac OS applications.\r\n\r\nAlthough originally designed for iOS applications to realize fast real time graphic processing, one important feature of Metal is its integrated support for both graphics and compute operations. Therefore, fields requiring large scale computation such as deep learning can also benefit greatly from this library. \r\n\r\n### The Challenge\r\nBoth the Metal API and Swift 2.0 are relatively new. Support and documentation may therefore be limited. I expect more challenge to arise as I proceed with the project.\r\n\r\n### Resources\r\n- https://developer.apple.com/metal/\r\n- https://developer.apple.com/swift/resources/parall\r\n\r\n### Goals and Deliverables\r\nIf successful, I plan to deliver a set of common parallel primitives that can be used directly in Swift 2.0. To achieve speedup on parallelizable computations,   we expect users to have no knowledge of Metal or the GPU.\r\n\r\n### Platform Choice\r\n- Mac OS X El Capitan\r\n- Swift 2.0\r\n\r\n### Schedule\r\n- 4/1 Proposal\r\n- 4/8 Conduct research on and experimenting with Metal on Mac OS X.\r\n- 4/15 Implement fundamental GPU algorithms such as scan, sort, reduce, map.\r\n- 4/28 Evaluate and possibly improve the performance of existing code.\r\n- 5/9 Deadline\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}